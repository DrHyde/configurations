#!bash

git() {
    if [[ "$1" == "pullall" ]]; then
        _gitall pull
    elif [[ "$1" == "pushall" ]]; then
        _gitall push
    elif [[ "$1" == "statusall" ]]; then
        _gitall status
    elif [[ "$1" == "showdefaultbranch" ]]; then
        $(which git) remote show origin | awk '/HEAD branch/ {print $NF}'
    elif [[ "$1" == "defaultbranch" ]]; then
        $(which git) checkout $(git showdefaultbranch)
    elif [[ "$1 $2 $3" == "clone git clone" ]]; then
        # because some gitty websites want to copy 'git clone blahblah' into
        # the paste buffer and others just the repository address. Bastards
        shift; shift
        $(which git) "$@"
    elif [[ "$1" == "log" ]]; then
        shift
        $(which git) log --graph --date-order "$@"
    elif [[ "$1" == "cherry-pick" ]]; then
        shift
        if [ "$1" == "--continue" ] || [ "$1" == "--skip" ] || [ "$1" == "--abort" ] || [ "$1" == "--quit" ]; then
            $(which git) cherry-pick "$@"
        else
            $(which git) cherry-pick -x "$@"
        fi
    elif [[ "$1" == "commit" ]]; then
        shift
        for i in "$@"; do
            if [ "$i" == "-a" ] || [ "$i" == "--all" ]; then
                echo NO\! SHAN\'T\! $i is BAD\!
                return 1
            fi
        done

        if [[ "$1" != "--amend" ]]; then
            local DEFAULT_BRANCH=$(git showdefaultbranch)
            local CURRENT_BRANCH=$($(which git) rev-parse --abbrev-ref HEAD)

            if [[ "$CURRENT_BRANCH" = "$DEFAULT_BRANCH" ]]; then
              if [ "$COMMIT_TO_DEFAULT_BRANCH" ] ; then
                echo "OK, letting you commit to $CURRENT_BRANCH"
              else
                echo "You should not be committing to $CURRENT_BRANCH directly, raise a PR"
                echo "If you have a really good reason to do so, set env var COMMIT_TO_DEFAULT_BRANCH"
                return 1;
              fi
            fi
        fi

        $(which git) commit "$@"
    else
        $(which git) "$@"
    fi
} 

_gitall() {
    for i in *; do
        if [[ -d $i ]]; then
            echo $i
            (
                cd $i
                git $1 2>&1| sed 's/^/    /'
            )
        fi
    done
}
