let perl_fold = 1
let perl_fold_blocks = 1

set wildmode=longest,list,full
set wildmenu
set autoindent
set ruler
set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set showmatch
set incsearch
set laststatus=2
set nojoinspaces
set cursorline

set number
set relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

syntax on

" the default is too dark for a dark terminal background
highlight vimComment ctermfg=LightBlue
highlight perlComment ctermfg=LightBlue
highlight shComment ctermfg=LightBlue
highlight rubyComment ctermfg=LightBlue
highlight confComment ctermfg=LightBlue

highlight LineNr cterm=NONE ctermfg=DarkGrey ctermbg=none
highlight StatusLine   ctermfg=White ctermbg=Red  cterm=bold
highlight StatusLineNC ctermfg=White ctermbg=Blue cterm=none

highlight CursorLine term=bold cterm=bold ctermbg=254

" :Diff
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! Diff call s:DiffWithSaved()

" \mw to mark a window, \pw to swap marked and current
function! MarkWindowSwap()
    let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
    "Mark destination
    let curNum = winnr()
    let curBuf = bufnr( "%" )
    exe g:markedWinNum . "wincmd w"
    "Switch to source and shuffle dest->source
    let markedBuf = bufnr( "%" )
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' curBuf
    "Switch to dest and shuffle source->dest
    exe curNum . "wincmd w"
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedBuf 
endfunction

nmap <silent> <leader>mw :call MarkWindowSwap()<CR>
nmap <silent> <leader>pw :call DoWindowSwap()<CR>

augroup BgHighlight
    autocmd!
    autocmd WinEnter * set number
    autocmd WinLeave * set nonumber
augroup END

let g:session_autosave = "yes"
let g:session_autoload = "yes"

" A command to perltidy and return the cursor whence it came.
" This allows 3 modes of use:
"    - In normal mode Ctl+t or :Tidy will tidy the whole buffer
"    - In :command mode, you can say :Tidy 4,11 to tidy line 4 to 11
"    - In Visual mode, hit Ctr+t or :Tidy to tidy the selected block
" 
" Change the <C-t> mappings at the bottom to choose a different shortcut. ;)
"
" Courtesy of TehJim xxx *muwhaa*
"
function! g:PerlTidyWithoutMovingTheCursor(...)                              
    let b:cursorPos = getpos('.')                              
                                                               
    " If we were called with params...                         
    if a:0 == 2                                                
        execute "".a:1.",".a:2."!perltidy"                     
                                                               
    " In normal mode, we want to do the whole buffer           
    else                                                       
        :%!perltidy                                            
    endif                                                      
                                                               
    redraw!                                                    
    call cursor(b:cursorPos[1], b:cursorPos[2])                
endfunction                                                    
command -range=% -nargs=* Tidy call g:PerlTidyWithoutMovingTheCursor(<args>)
:nmap <C-t> :Tidy<CR>                                          
:vmap <C-t> :!perltidy<CR>                                     

